{"version":3,"file":"static/js/541.3777e095.chunk.js","mappings":"sMA0CA,UApCa,WACX,OAAwBA,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACMC,GAAYC,EAAAA,EAAAA,MAAZD,QAYN,OAVAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAoBH,EAAS,YAC1BI,MAAK,SAAAN,GACJC,EAAQD,EACT,IACAO,OAAM,SAAAC,GACLC,EAAAA,GAAAA,MAAYD,EAAIE,QACjB,GACJ,GAAE,CAACR,KAGF,yBACGF,EAAKW,QACJ,wBACGX,EAAKY,KAAI,gBAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,KAAMC,EAApB,EAAoBA,KAAMC,EAA1B,EAA0BA,UAA1B,OACR,2BACE,gBAAKC,IAAKF,EAAMG,IAAI,YACpB,uBAAIJ,KACJ,6BACE,sCACCE,OALIH,EADD,OAYZ,6CAIP,C,+LCtCKM,EAAU,mCACVC,EAAW,gCACXC,EAAkB,uDAEXC,EAAiB,mCAAG,6FACzBC,EADyB,UAChBH,EADgB,uCACuBD,GADvB,SAERK,EAAAA,EAAAA,IAAUD,GAFF,cAEzBE,EAFyB,yBAGxBA,EAASC,MAHe,2CAAH,qDAMjBC,EAAe,mCAAG,WAAMC,GAAN,gFACvBL,EADuB,UACdH,EADc,iCACmBD,EADnB,kBACoCS,EADpC,uDAERJ,EAAAA,EAAAA,IAAUD,GAFF,cAEvBM,EAFuB,yBAGtBA,EAAOH,KAAKI,SAHU,2CAAH,sDAMfC,EAAY,mCAAG,WAAMC,GAAN,oFACpBT,EADoB,UACXH,EADW,kBACOY,EADP,oBACqBb,GADrB,SAEHK,EAAAA,EAAAA,IAAUD,GAFP,uBAElBG,EAFkB,EAElBA,MACFG,EAASI,EAASP,IACjBQ,OAASL,EAAOK,OAAOtB,KAAI,SAAAuB,GAAK,OAAIA,EAAMrB,IAAV,IAJb,kBAKnBe,GALmB,2CAAH,sDAQZxB,EAAmB,mCAAG,WAAM2B,GAAN,kFAC3BT,EAD2B,UAClBH,EADkB,kBACAY,EADA,4BACsBb,GADtB,SAIvBK,EAAAA,EAAAA,IAAUD,GAJa,uBAGvBvB,EAHuB,EAG/B0B,KAAQ1B,KAHuB,kBAK1BA,EAAKY,IAAIwB,IALiB,2CAAH,sDAQnBC,EAAmB,mCAAG,WAAML,GAAN,oFAC3BT,EAD2B,UAClBH,EADkB,kBACAY,EADA,4BACsBb,GADtB,SAIvBK,EAAAA,EAAAA,IAAUD,GAJa,uBAGvBO,EAHuB,EAG/BJ,KAAQI,QAEJQ,EAAUR,EAAQlB,KAAI,YAC1B,MAAO,CAAE2B,OAD0C,EAAtBA,OACZC,QADkC,EAAdA,QAEtC,IAPgC,kBAQ1BF,GAR0B,2CAAH,sDAW1BL,EAAW,SAAAQ,GACf,IAAIZ,EAASa,OAAOC,OAAO,CAAC,EAAGF,GAQ/B,OAPIZ,EAAOe,YACTf,EAAOe,YAAc,kCAAoCf,EAAOe,YAC7Df,EAAOe,YAAcvB,EAC1BQ,EAAOgB,aAAgBhB,EAAOiB,aAE1BjB,EAAOiB,aAAaC,MAAM,EAAG,GAD7B,UAEJlB,EAAOmB,aAAP,UAA+C,GAAtBnB,EAAOmB,aAAhC,KACOnB,CACR,EAEKO,EAAU,SAAC,GAAkD,IAAhDvB,EAA+C,EAA/CA,UAAWC,EAAoC,EAApCA,KAAMmC,EAA8B,EAA9BA,aAC5BC,EAAW,CAAErC,UAAAA,EAAWC,KAAAA,EAAME,UAD4B,EAAhBA,WAKhD,OAHAkC,EAASnC,KAAOkC,EACZ,kCAAoCA,EACpC5B,EACG6B,CACR,C","sources":["components/Cast/Cast.js","services/api-service.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-hot-toast';\n\nimport { getMovieCreditsById } from 'services/api-service';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  let { movieId } = useParams();\n\n  useEffect(() => {\n    getMovieCreditsById(movieId, '/credits')\n      .then(cast => {\n        setCast(cast);\n      })\n      .catch(err => {\n        toast.error(err.message);\n      });\n  }, [movieId]);\n\n  return (\n    <div>\n      {cast.length ? (\n        <ul>\n          {cast.map(({ credit_id, name, path, character }) => (\n            <li key={credit_id}>\n              <img src={path} alt=\"poster\" />\n              <p>{name}</p>\n              <span>\n                <p>Character:</p>\n                {character}\n              </span>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>Actors not found</p>\n      )}\n    </div>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY = 'a2131ad5d6a3f97436f48b66c08b88ca';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst IMG_PLACEHOLDER = 'https://critics.io/img/movies/poster-placeholder.png';\n\nexport const getTrendingMovies = async () => {\n  const url = `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`;\n  const response = await axios.get(url);\n  return response.data;\n};\n\nexport const getSearchMovies = async query => {\n  const url = `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`;\n  const result = await axios.get(url);\n  return result.data.results;\n};\n\nexport const getMovieById = async id => {\n  const url = `${BASE_URL}/movie/${id}?api_key=${API_KEY}`;\n  const { data } = await axios.get(url);\n  const result = fixMovie(data);\n  result.genres = result.genres.map(genre => genre.name);\n  return result;\n};\n\nexport const getMovieCreditsById = async id => {\n  const url = `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`;\n  const {\n    data: { cast },\n  } = await axios.get(url);\n  return cast.map(fixCast);\n};\n\nexport const getMovieReviewsById = async id => {\n  const url = `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`;\n  const {\n    data: { results },\n  } = await axios.get(url);\n  const reviews = results.map(({ author, content }) => {\n    return { author, content };\n  });\n  return reviews;\n};\n\nconst fixMovie = movie => {\n  let result = Object.assign({}, movie);\n  if (result.poster_path)\n    result.poster_path = 'https://image.tmdb.org/t/p/w500' + result.poster_path;\n  else result.poster_path = IMG_PLACEHOLDER;\n  result.release_year = !result.release_date\n    ? 'Unknown'\n    : result.release_date.slice(0, 4);\n  result.vote_average = `${result.vote_average * 10}%`;\n  return result;\n};\n\nconst fixCast = ({ credit_id, name, profile_path, character }) => {\n  const newActor = { credit_id, name, character };\n  newActor.path = profile_path\n    ? 'https://image.tmdb.org/t/p/w500' + profile_path\n    : IMG_PLACEHOLDER;\n  return newActor;\n};\n"],"names":["useState","cast","setCast","movieId","useParams","useEffect","getMovieCreditsById","then","catch","err","toast","message","length","map","credit_id","name","path","character","src","alt","API_KEY","BASE_URL","IMG_PLACEHOLDER","getTrendingMovies","url","axios","response","data","getSearchMovies","query","result","results","getMovieById","id","fixMovie","genres","genre","fixCast","getMovieReviewsById","reviews","author","content","movie","Object","assign","poster_path","release_year","release_date","slice","vote_average","profile_path","newActor"],"sourceRoot":""}